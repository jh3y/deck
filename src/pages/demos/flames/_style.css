@import 'normalize.css' layer(normalize);

@layer normalize, foundation, demo, filter;

@layer filter {
  article:last-of-type {
    position: relative;
    background: black;
  }

  article:not(.flames) {
    display: none;
  }

  [data-displace='false'] .strip {
    translate: calc(-100% - 1rem) 0;
  }

  [data-animate='false'] .strip div {
    animation-play-state: paused;
  }

  .holder {
    position: relative;
  }

  .holder > .strip {
    position: absolute;
    inset: 0;
    overflow: hidden;
    clip-path: inset(0 round 12px);
  }

  /* article:last-of-type div:first-of-type {
    filter: url('#noiseshow');
  } */

  /* seed: 674 base: 0.01, numOctaves: 5, fractalNoise */
  .strip {
    mask: linear-gradient(#0000 20%, #fff);
    width: 100%;
    height: 100%;
    transition: translate 0.26s ease-out;
  }
  .strip div {
    background: light-dark(#fff, #000);
    filter: url('#noiseshow') grayscale(0);
    animation: scale calc(var(--flame-speed, 10) * 1s) infinite linear;

    height: 400%;
    width: 100%;
    clip-path: inset(0 0 0 0);
    position: absolute;

    &:nth-of-type(1) {
      bottom: 0;
    }

    &:nth-of-type(2) {
      top: 100%;
      scale: -1 -1;
    }

    &:nth-of-type(3) {
      top: 500%;
    }
  }

  /* jus got to work out this absolute mess that doesn't seem to work anymore.... */

  @keyframes scale {
    to {
      translate: 0 -200%;
    }
  }

  .flames {
    filter: blur(calc(var(--flame-blur) * 1px)) contrast(var(--flame-contrast));
  }

  .flames:last-of-type > div:not(:first-of-type) {
    position: absolute;
    inset: 0;
  }
  .flames:last-of-type > div:nth-of-type(2) {
    background: linear-gradient(rgba(0, 0, 0, 0), #c0ac4c);
    mix-blend-mode: plus-lighter;
    mask: linear-gradient(#0000 30%, #fff);
  }
  .flames:last-of-type > div:nth-of-type(3) {
    background: var(--flame, #822f2f);
    mix-blend-mode: color-burn;
    filter: contrast(1.35);
    mask: linear-gradient(#0000 40%, #fff);
  }
  .flames:last-of-type > div:nth-of-type(4) {
    background: #fff;
    mix-blend-mode: color-burn;
    filter: contrast(1.35);
    /* mask: linear-gradient(#0000 30%, #fff); */
  }
  article img {
    filter: url('#distortion');
    filter: url('#tiled');
  }
}

@layer demo {
  .border {
    border: 1px solid color-mix(in hsl, canvasText, canvas);
    overflow: hidden;
    border-radius: 12px;
    aspect-ratio: 2 / 3;
    width: clamp(300px, 30vmin, 500px);
  }

  article {
    overflow: hidden;
    border-radius: 12px;
    aspect-ratio: 2 / 3;
    width: clamp(300px, 30vmin, 500px);

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }
  main {
    display: flex;
    gap: 1rem;
  }

  article:last-of-type {
    /* outline: 2px dashed canvasText;
    outline-offset: 2px; */
  }
}

@layer foundation {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    /* background: light-dark(#fff, #000); */
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  /* body::before {
    --size: 45px;
    --line: color-mix(in hsl, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  } */

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}
div.tp-dfwv {
  width: 280px;
}
.tp-lblv_l {
  white-space: nowrap;
}
