@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* typography */
    --font-size-min: 17;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.618;
    --font-width-min: 320;
    --font-width-max: 1500;
    /* shadow */
    --base: hsl(var(--tint, 214) 80% 27% / calc(var(--alpha, 4) * 1%));
    /**
      * Use relative syntax to get to: hsl(221 25% 22% / 40%)
    */
    --shade: hsl(from var(--base) calc(h + 8) 25 calc(l - 5));
    --perfect-shadow: 0 0 0 1px var(--base), 0 1px 1px -0.5px var(--shade),
      0 3px 3px -1.5px var(--shade), 0 6px 6px -3px var(--shade),
      0 12px 12px -6px var(--base), 0 24px 24px -12px var(--base);
  }

  body {
    background: canvas;
    color: canvasText;
    min-height: 100svh;
  }

  html {
    color-scheme: light only;
  }

  body::before {
    --size: 40px;
    --line: color-mix(in lch, canvasText 25%, hsl(0 0% 100% / 0.5));
    content: "";
    height: 100svh;
    width: 100vw;
    position: fixed;
    background:
      linear-gradient(90deg, var(--line) 1px, transparent 1px var(--size)) 50%
        50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-25deg, transparent 65%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  :is(h1, h2, h3, h4, h5, .fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    line-height: 1;
    font-size: var(--fluid-type);
    font-weight: 900;
  }

  h1 {
    --font-level: 4;
  }
  h2 {
    --font-level: 3;
  }
  h3 {
    --font-level: 2;
  }

  [data-theme="light"] body {
    color-scheme: light only;
  }
  [data-theme="dark"] body {
    color-scheme: dark only;
  }

  [data-step] {
    opacity: var(--active, 0);
    scale: var(--active, 0);
    transition:
      scale 0.25s,
      opacity 0.25s;
  }

  [data-step-active="false"] {
    --active: 0;
  }
  [data-step-active="true"] {
    --active: 1;
  }

  .section__backdrop {
    position: fixed;
    inset: 0;
  }
}

@layer utilities {
  .shadow-perfect {
    @apply [box-shadow:var(--perfect-shadow)];
  }
  .quote {
    @apply justify-self-start self-start text-left text-balance [&_blockquote]:before:content-[open-quote] [&_blockquote]:after:content-[close-quote] [&_blockquote]:indent-[-0.45em] [&_blockquote]:leading-[1];
  }
}
